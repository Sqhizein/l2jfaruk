/*
 * This file is part of the L2J Faruk project.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.l2jmobius.gameserver.network.serverpackets;

import org.l2jmobius.commons.network.WritableBuffer;
import org.l2jmobius.gameserver.network.GameClient;
import org.l2jmobius.gameserver.network.ServerPackets;

/**
 * @author KenM
 */
public class ExBasicActionList extends ServerPacket
{
	//@formatter:off
	public static final int[] ACTIONS_ON_TRANSFORM =
	{
		1, 2, 3, 4,
		5, 6, 7, 8,
		9, 11, 15, 16,
		17, 18, 19, 21,
		22, 23, 32, 36,
		39, 40, 41, 42,
		43, 44, 45, 46,
		47, 48, 50, 52,
		53, 54, 55, 56,
		57, 63, 64, 65,
		70, 1000, 1001, 1003,
		1004, 1005, 1006, 1007,
		1008, 1009, 1010, 1011,
		1012, 1013, 1014, 1015,
		1016, 1017, 1018, 1019,
		1020, 1021, 1022, 1023,
		1024, 1025, 1026, 1027,
		1028, 1029, 1030, 1031,
		1032, 1033, 1034, 1035,
		1036, 1037, 1038, 1039,
		1040, 1041, 1042, 1043,
		1044, 1045, 1046, 1047,
		1048, 1049, 1050, 1051,
		1052, 1053, 1054, 1055,
		1056, 1057, 1058, 1059,
		1060, 1061, 1062, 1063,
		1064, 1065, 1066, 1067,
		1068, 1069, 1070, 1071,
		1072, 1073, 1074, 1075,
		1076, 1077, 1078, 1079,
		1080, 1081, 1082, 1083,
		1084, 1089, 1090, 1091,
		1092, 1093, 1094, 1095,
		1096, 1097, 1098,
        5100, 5101, 5102, 5103,
        5104, 5105, 5106, 5107,
        5108, 5109, 5110, 5111,
        5112, 5113, 5114, 5115,
        5116, 5117, 5118, 5119,
        5120, 5121, 5122, 5123,
        5124, 5125, 5126, 5127,
        5128, 5129, 5130, 5131,
        5132, 5133, 5134, 5135,
        5136, 5137, 5138, 5139,
        5140, 5141, 5142, 5143,
        5144, 5145, 5146, 5147,
        5148, 5149, 5150, 5151,
        5152, 5153, 5154, 5155,
        5156, 5157, 5158, 5159,
        5160, 5161, 5162, 5163,
        5164, 5165, 5166, 5167,
        5168, 5169, 5170, 5171,
        5172, 5173, 5174, 5175,
        5176, 5177, 5178, 5179,
        5180, 5181, 5182, 5183,
        5184, 5185, 5186, 5187,
        5188, 5189, 5190, 5191,
        5192, 5193, 5194, 5195,
        5196, 5197, 5198, 5199,
        5200, 5201, 5202, 5203,
        5204, 5205, 5206, 5207,
        5208, 5209, 5210, 5211,
        5212, 5213, 5214, 5215,
        5216, 5217, 5218, 5219,
        5220, 5221, 5222, 5223,
        5224, 5225, 5226, 5227,
        5228, 5229, 5230, 5231,
        5232, 5233, 5234, 5235,
        5236, 5237, 5238, 5239,
        5240, 5241, 5242, 5243,
        5244, 5245, 5246, 5247,
        5248, 5249, 5250, 5251,
        5252, 5253, 5254, 5255,
        5256, 5257, 5258, 5259,
        5260, 5261, 5262, 5263,
        5264, 5265, 5266, 5267,
        5268, 5269, 5270, 5271,
        5272, 5273, 5274, 5275,
        5276, 5277, 5278, 5279,
        5280, 5281, 5282, 5283,
        5284, 5285, 5286, 5287,
        5288, 5289, 5290, 5291,
        5292, 5293, 5294, 5295,
        5296, 5297, 5298, 5299,
        5300, 5301, 5302, 5303,
        5304, 5305, 5306, 5307,
        5308, 5309, 5310, 5311,
        5312, 5313, 5314, 5315,
        5316, 5317, 5318, 5319,
        5320, 5321, 5322, 5323,
        5324, 5325, 5326, 5327,
        5328, 5329, 5330, 5331,
        5332, 5333, 5334, 5335,
        5336, 5337, 5338, 5339,
        5340, 5341, 5342, 5343,
        5344, 5345, 5346, 5347,
        5348, 5349, 5350, 5351,
        5352, 5353, 5354, 5355,
        5356, 5357, 5358, 5359,
        5360, 5361, 5362, 5363,
        5364, 5365, 5366, 5367,
        5368, 5369, 5370, 5371,
        5372, 5373, 5374, 5375,
        5376, 5377, 5378, 5379,
        5380, 5381, 5382, 5383,
        5384, 5385, 5386, 5387,
        5388, 5389, 5390, 5391,
        5392, 5393, 5394, 5395,
        5396, 5397, 5398, 5399,
        5400, 5401, 5402, 5403,
        5404, 5405, 5406, 5407,
        5408, 5409, 5410, 5411,
        5412, 5413, 5414, 5415,
        5416, 5417, 5418, 5419,
        5420, 5421, 5422, 5423,
        5424, 5425, 5426, 5427,
        5428, 5429, 5430, 5431,
        5432, 5433, 5434, 5435,
        5436, 5437, 5438, 5439,
        5440, 5441, 5442, 5443,
        5444, 5445, 5446, 5447,
        5448, 5449, 5450, 5451,
        5452, 5453, 5454, 5455,
        5456, 5457, 5458, 5459,
        5460, 5461, 5462, 5463,
        5464, 5465, 5466, 5467,
        5468, 5469, 5470, 5471,
        5472, 5473, 5474, 5475,
        5476, 5477, 5478, 5479,
        5480, 5481, 5482, 5483,
        5484, 5485, 5486, 5487,
        5488, 5489, 5490, 5491,
        5492, 5493, 5494, 5495,
        5496, 5497, 5498, 5499,
        5500, 5501, 5502, 5503,
        5504, 5505, 5506, 5507,
        5508, 5509, 5510, 5511,
        5512, 5513, 5514, 5515,
        5516, 5517, 5518, 5519,
        5520, 5521, 5522, 5523,
        5524, 5525, 5526, 5527,
        5528, 5529, 5530, 5531,
        5532, 5533, 5534, 5535,
        5536, 5537, 5538, 5539,
        5540, 5541, 5542, 5543,
        5544, 5545, 5546, 5547,
        5548, 5549, 5550, 5551,
        5552, 5553, 5554, 5555,
        5556, 5557, 5558, 5559,
        5560, 5561, 5562, 5563,
        5564, 5565, 5566, 5567,
        5568, 5569, 5570, 5571,
        5572, 5573, 5574, 5575,
        5576, 5577, 5578, 5579,
        5580, 5581, 5582, 5583,
        5584, 5585, 5586, 5587,
        5588, 5589, 5590, 5591,
        5592, 5593, 5594, 5595,
        5596, 5597, 5598, 5599,
        5600, 5601, 5602, 5603,
        5604, 5605, 5606, 5607,
        5608, 5609, 5610, 5611,
        5612, 5613, 5614, 5615,
        5616, 5617, 5618, 5619,
        5620, 5621, 5622, 5623,
        5624, 5625, 5626, 5627,
        5628, 5629, 5630, 5631,
        5632, 5633, 5634, 5635,
        5636, 5637, 5638, 5639,
        5640, 5641, 5642, 5643,
        5644, 5645, 5646, 5647,
        5648, 5649, 5650, 5651,
        5652, 5653, 5654, 5655,
        5656, 5657, 5658, 5659,
        5660, 5661, 5662, 5663,
        5664, 5665, 5666, 5667,
        5668, 5669, 5670, 5671,
        5672, 5673, 5674, 5675,
        5676, 5677, 5678, 5679,
        5680, 5681, 5682, 5683,
        5684, 5685, 5686, 5687,
        5688, 5689, 5690, 5691,
        5692, 5693, 5694, 5695,
        5696, 5697, 5698, 5699,
        5700, 5701, 5702, 5703,
        5704, 5705, 5706, 5707,
        5708, 5709, 5710, 5711,
        5712, 5713, 5714, 5715,
        5716, 5717, 5718, 5719,
        5720, 5721, 5722, 5723,
        5724, 5725, 5726, 5727,
        5728, 5729, 5730, 5731,
        5732, 5733, 5734, 5735,
        5736, 5737, 5738, 5739,
        5740, 5741, 5742, 5743,
        5744, 5745, 5746, 5747,
        5748, 5749, 5750, 5751,
        5752, 5753, 5754, 5755,
        5756, 5757, 5758, 5759,
        5760, 5761, 5762, 5763,
        5764, 5765, 5766, 5767,
        5768, 5769, 5770, 5771,
        5772, 5773, 5774, 5775,
        5776, 5777, 5778, 5779,
        5780, 5781, 5782, 5783,
        5784, 5785, 5786, 5787,
        5788, 5789, 5790, 5791,
        5792, 5793, 5794, 5795,
        5796, 5797, 5798, 5799,
        5800, 5801, 5802, 5803,
        5804, 5805, 5806, 5807,
        5808, 5809, 5810, 5811,
        5812, 5813, 5814, 5815,
        5816, 5817, 5818, 5819,
        5820, 5821, 5822, 5823,
        5824, 5825, 5826, 5827,
        5828, 5829, 5830, 5831,
        5832, 5833, 5834, 5835,
        5836, 5837, 5838, 5839,
        5840, 5841, 5842, 5843,
        5844, 5845, 5846, 5847,
        5848, 5849, 5850, 5851,
        5852, 5853, 5854, 5855,
        5856, 5857, 5858, 5859,
        5860, 5861, 5862, 5863,
        5864, 5865, 5866, 5867,
        5868, 5869, 5870, 5871,
        5872, 5873, 5874, 5875,
        5876, 5877, 5878, 5879,
        5880, 5881, 5882, 5883,
        5884, 5885, 5886, 5887,
        5888, 5889, 5890, 5891,
        5892, 5893, 5894, 5895,
        5896, 5897, 5898, 5899,
        5900, 5901, 5902, 5903,
        5904, 5905, 5906, 5907,
        5908, 5909, 5910, 5911,
        5912, 5913, 5914, 5915,
        5916, 5917, 5918, 5919,
        5920, 5921, 5922, 5923,
        5924, 5925, 5926, 5927,
        5928, 5929, 5930, 5931,
        5932, 5933, 5934, 5935,
        5936, 5937, 5938, 5939,
        5940, 5941, 5942, 5943,
        5944, 5945, 5946, 5947,
        5948, 5949, 5950, 5951,
        5952, 5953, 5954, 5955,
        5956, 5957, 5958, 5959,
        5960, 5961, 5962, 5963,
        5964, 5965, 5966, 5967,
        5968, 5969, 5970, 5971,
        5972, 5973, 5974, 5975,
        5976, 5977, 5978, 5979,
        5980, 5981, 5982, 5983,
        5984, 5985, 5986, 5987,
        5988, 5989, 5990, 5991,
        5992, 5993, 5994, 5995,
        5996, 5997, 5998, 5999,
        6000, 6001, 6002, 6003,
        6004, 6005, 6006, 6007,
        6008, 6009, 6010, 6011,
        6012, 6013, 6014, 6015,
        6016, 6017, 6018, 6019,
        6020, 6021, 6022, 6023,
        6024, 6025, 6026, 6027,
        6028, 6029, 6030, 6031,
        6032, 6033, 6034, 6035,
        6036, 6037, 6038, 6039,
        6040, 6041, 6042, 6043,
        6044, 6045, 6046, 6047,
        6048, 6049, 6050, 6051,
        6052, 6053, 6054, 6055,
        6056, 6057, 6058, 6059,
        6060, 6061, 6062, 6063,
        6064, 6065, 6066, 6067,
        6068, 6069, 6070, 6071,
        6072, 6073, 6074, 6075,
        6076, 6077, 6078, 6079,
        6080, 6081, 6082, 6083,
        6084, 6085, 6086, 6087,
        6088, 6089, 6090, 6091,
        6092, 6093, 6094, 6095,
        6096, 6097, 6098, 6099,
        6100, 6101, 6102, 6103,
        6104, 6105, 6106, 6107,
        6108, 6109, 6110, 6111,
        6112, 6113, 6114, 6115,
        6116, 6117, 6118, 6119,
        6120, 6121, 6122, 6123,
        6124, 6125, 6126, 6127,
        6128, 6129, 6130, 6131,
        6132, 6133, 6134, 6135,
        6136, 6137, 6138, 6139,
        6140, 6141, 6142, 6143,
        6144, 6145, 6146, 6147,
        6148, 6149, 6150, 6151,
        6152, 6153, 6154, 6155,
        6156, 6157, 6158, 6159,
        6160, 6161, 6162, 6163,
        6164, 6165, 6166, 6167,
        6168, 6169, 6170, 6171,
        6172, 6173, 6174, 6175,
        6176, 6177, 6178, 6179,
        6180, 6181, 6182, 6183,
        6184, 6185, 6186, 6187,
        6188, 6189, 6190, 6191,
        6192, 6193, 6194, 6195,
        6196, 6197, 6198, 6199,
        6200, 6201, 6202, 6203,
        6204, 6205, 6206, 6207,
        6208, 6209, 6210, 6211,
        6212, 6213, 6214, 6215,
        6216, 6217, 6218, 6219,
        6220, 6221, 6222, 6223,
        6224, 6225, 6226, 6227,
        6228, 6229, 6230, 6231,
        6232, 6233, 6234, 6235,
        6236, 6237, 6238, 6239,
        6240, 6241, 6242, 6243,
        6244, 6245, 6246, 6247,
        6248, 6249, 6250, 6251,
        6252, 6253, 6254, 6255,
        6256, 6257, 6258, 6259,
        6260, 6261, 6262, 6263,
        6264, 6265, 6266, 6267,
        6268, 6269, 6270, 6271,
        6272, 6273, 6274, 6275,
        6276, 6277, 6278, 6279,
        6280, 6281, 6282, 6283,
        6284, 6285, 6286, 6287,
        6288, 6289, 6290, 6291,
        6292, 6293, 6294, 6295,
        6296, 6297, 6298, 6299,
        6300, 6301, 6302, 6303,
        6304, 6305, 6306, 6307,
        6308, 6309, 6310, 6311,
        6312, 6313, 6314, 6315,
        6316, 6317, 6318, 6319,
        6320, 6321, 6322, 6323,
        6324, 6325, 6326, 6327,
        6328, 6329, 6330, 6331,
        6332, 6333, 6334, 6335,
        6336, 6337, 6338, 6339,
        6340, 6341, 6342, 6343,
        6344, 6345, 6346, 6347,
        6348, 6349, 6350, 6351,
        6352, 6353, 6354, 6355,
        6356, 6357, 6358, 6359,
        6360, 6361, 6362, 6363,
        6364, 6365, 6366, 6367,
        6368, 6369, 6370, 6371,
        6372, 6373, 6374, 6375,
        6376, 6377, 6378, 6379,
        6380, 6381, 6382, 6383,
        6384, 6385, 6386, 6387,
        6388, 6389, 6390, 6391,
        6392, 6393, 6394, 6395,
        6396, 6397, 6398, 6399,
        6400, 6401, 6402, 6403,
        6404, 6405, 6406, 6407,
        6408, 6409, 6410, 6411,
        6412, 6413, 6414, 6415,
        6416, 6417, 6418, 6419,
        6420, 6421, 6422, 6423,
        6424, 6425, 6426, 6427,
        6428, 6429, 6430, 6431,
        6432, 6433, 6434, 6435,
        6436, 6437, 6438, 6439,
        6440, 6441, 6442, 6443,
        6444, 6445, 6446, 6447,
        6448, 6449, 6450, 6451,
        6452, 6453, 6454, 6455,
        6456, 6457, 6458, 6459,
        6460, 6461, 6462, 6463,
        6464, 6465, 6466, 6467,
        6468, 6469, 6470, 6471,
        6472, 6473, 6474, 6475,
        6476, 6477, 6478, 6479,
        6480, 6481, 6482, 6483,
        6484, 6485, 6486, 6487,
        6488, 6489, 6490, 6491,
        6492, 6493, 6494, 6495,
        6496, 6497, 6498, 6499,
        6500, 6501, 6502, 6503,
        6504, 6505, 6506, 6507,
        6508, 6509, 6510, 6511,
        6512, 6513, 6514, 6515,
        6516, 6517, 6518, 6519,
        6520, 6521, 6522, 6523,
        6524, 6525, 6526, 6527,
        6528, 6529, 6530, 6531,
        6532, 6533, 6534, 6535,
        6536, 6537, 6538, 6539,
        6540, 6541, 6542, 6543,
        6544, 6545, 6546, 6547,
        6548, 6549, 6550, 6551,
        6552, 6553, 6554, 6555,
        6556, 6557, 6558, 6559,
        6560, 6561, 6562, 6563,
        6564, 6565, 6566, 6567,
        6568, 6569, 6570, 6571,
        6572, 6573, 6574, 6575,
        6576, 6577, 6578, 6579,
        6580, 6581, 6582, 6583,
        6584, 6585, 6586, 6587,
        6588, 6589, 6590, 6591,
        6592, 6593
    };
	//@formatter:on
	
	public static final int[] DEFAULT_ACTION_LIST;
	static
	{
		final int count1 = 74; // 0 <-> (count1 - 1)
		final int count2 = 99; // 1000 <-> (1000 + count2 - 1)
		final int count3 = 16; // 5000 <-> (5000 + count3 - 1)
		DEFAULT_ACTION_LIST = new int[count1 + count2 + count3];
		int i;
		for (i = count1; i-- > 0;)
		{
			DEFAULT_ACTION_LIST[i] = i;
		}
		for (i = count2; i-- > 0;)
		{
			DEFAULT_ACTION_LIST[count1 + i] = 1000 + i;
		}
		for (i = count3; i-- > 0;)
		{
			DEFAULT_ACTION_LIST[count1 + count2 + i] = 5000 + i;
		}
	}
	
	public static final ExBasicActionList STATIC_PACKET = new ExBasicActionList(DEFAULT_ACTION_LIST);
	
	private final int[] _actionIds;
	
	public ExBasicActionList(int[] actionIds)
	{
		_actionIds = actionIds;
	}
	
	@Override
	public void writeImpl(GameClient client, WritableBuffer buffer)
	{
		ServerPackets.EX_BASIC_ACTION_LIST.writeId(this, buffer);
		buffer.writeInt(_actionIds.length);
		for (int actionId : _actionIds)
		{
			buffer.writeInt(actionId);
		}
	}
}    static
    {
        final int count1 = 74; // 0 <-> (count1 - 1)
        final int count2 = 99; // 1000 <-> (1000 + count2 - 1)
        final int count3 = 1510; // 5000 <-> (5000 + count3 - 1)
        DEFAULT_ACTION_LIST = new int[count1 + count2 + count3];
        int i;
        for (i = count1; i-- > 0;)
        {
            DEFAULT_ACTION_LIST[i] = i;
        }
        for (i = count2; i-- > 0;)
        {
            DEFAULT_ACTION_LIST[count1 + i] = 1000 + i;
        }
        for (i = count3; i-- > 0;)
        {
            if (i < 16)  // Original actions
            {
                DEFAULT_ACTION_LIST[count1 + count2 + i] = 5000 + i;
            }
            else  // New actions
            {
                DEFAULT_ACTION_LIST[count1 + count2 + i] = 5100 + (i - 16);
            }
        }
    }/*
 * This file is part of the L2J Faruk project.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.l2jmobius.gameserver.network.serverpackets;

import org.l2jmobius.commons.network.WritableBuffer;
import org.l2jmobius.gameserver.network.GameClient;
import org.l2jmobius.gameserver.network.ServerPackets;

/**
 * @author KenM
 */
public class ExBasicActionList extends ServerPacket
{
	//@formatter:off
	public static final int[] ACTIONS_ON_TRANSFORM =
	{
		1, 2, 3, 4,
		5, 6, 7, 8,
		9, 11, 15, 16,
		17, 18, 19, 21,
		22, 23, 32, 36,
		39, 40, 41, 42,
		43, 44, 45, 46,
		47, 48, 50, 52,
		53, 54, 55, 56,
		57, 63, 64, 65,
		70, 1000, 1001, 1003,
		1004, 1005, 1006, 1007,
		1008, 1009, 1010, 1011,
		1012, 1013, 1014, 1015,
		1016, 1017, 1018, 1019,
		1020, 1021, 1022, 1023,
		1024, 1025, 1026, 1027,
		1028, 1029, 1030, 1031,
		1032, 1033, 1034, 1035,
		1036, 1037, 1038, 1039,
		1040, 1041, 1042, 1043,
		1044, 1045, 1046, 1047,
		1048, 1049, 1050, 1051,
		1052, 1053, 1054, 1055,
		1056, 1057, 1058, 1059,
		1060, 1061, 1062, 1063,
		1064, 1065, 1066, 1067,
		1068, 1069, 1070, 1071,
		1072, 1073, 1074, 1075,
		1076, 1077, 1078, 1079,
		1080, 1081, 1082, 1083,
		1084, 1089, 1090, 1091,
		1092, 1093, 1094, 1095,
		1096, 1097, 1098 
	};
	//@formatter:on
	
	public static final int[] DEFAULT_ACTION_LIST;
	static
	{
		final int count1 = 74; // 0 <-> (count1 - 1)
		final int count2 = 99; // 1000 <-> (1000 + count2 - 1)
		final int count3 = 16; // 5000 <-> (5000 + count3 - 1)
		DEFAULT_ACTION_LIST = new int[count1 + count2 + count3];
		int i;
		for (i = count1; i-- > 0;)
		{
			DEFAULT_ACTION_LIST[i] = i;
		}
		for (i = count2; i-- > 0;)
		{
			DEFAULT_ACTION_LIST[count1 + i] = 1000 + i;
		}
		for (i = count3; i-- > 0;)
		{
			DEFAULT_ACTION_LIST[count1 + count2 + i] = 5000 + i;
		}
	}
	
	public static final ExBasicActionList STATIC_PACKET = new ExBasicActionList(DEFAULT_ACTION_LIST);
	
	private final int[] _actionIds;
	
	public ExBasicActionList(int[] actionIds)
	{
		_actionIds = actionIds;
	}
	
	@Override
	public void writeImpl(GameClient client, WritableBuffer buffer)
	{
		ServerPackets.EX_BASIC_ACTION_LIST.writeId(this, buffer);
		buffer.writeInt(_actionIds.length);
		for (int actionId : _actionIds)
		{
			buffer.writeInt(actionId);
		}
	}
}
